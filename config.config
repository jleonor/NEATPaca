[GENERAL]
tickers             = BTC/USD, ETH/USD, LTC/USD, DOGE/USD, AVAX/USD     ;(sets the tickers that the agent will train AND trade on: str, ...)
timeframes          = 30Min                                             ;(sets the timeperiod used for training and live trading: str -Min, -H, -D)

[TRADING]
api_key             = PK50JGQU0JLZIJE9OM7A                              ;(sets the Alpaca api key: str)
api_secret          = F8QdVDCLEjsIoXwhgsTQQW5kIQTogiZA8rDGfu4N          ;(sets the Alpaca secret key: str)
agent_gens          = 560, 400, 190, 420, 400                           ;(sets the selected generation to live trade, must match the order and number of tickers: int ... )

[TRAINING]
threading           = TRUE                                              ;(setting to TRUE runs a training instance for each ticker, setting to FALSE prompts you which ticker to train: bool)
from_date           = 01-07-2023                                        ;(sets start date of the training dataset: str in "dd-mm-yyyy" format)
until_date          = FALSE                                             ;(sets end date of the training dataset: bool OR str in "dd-mm-yyyy" format)

starting_money      = 1000                                              ;(determines the amount the NEAT agent has in its wallet at the start of a training instance: int)
transaction_fee     = 0.01                                              ;(applies a transaction fee for all simulation trades: float)

[INDICATORS_NOT_OVERWRITABLE]
use_ma_cross        = TRUE                                              ;(adds moving average crossover signals using MA_PERIODS: bool)
use_ma_slope        = TRUE                                              ;(adds moving average slope signals using MA_PERIODS: bool)
use_ma_conv_div     = TRUE                                              ;(adds convergence divergence signals using MA_PERIODS: bool)

ma_conv_div_periods = 7, 28, 99                                         ;(sets the values for a fast, medium, and slow moving average: int, int, int)
ma_cross_periods    = 7, 28, 99                                         ;(sets the values for a fast, medium, and slow moving average: int, int, int)

use_bbands          = TRUE                                              ;(adds Bollinger Bands indicator: bool)
bbands_periods      = 20, 2, 2                                          ;(sets the period, standard deviations above, and below for Bollinger Bands: int, float, float)

use_stoch_cross     = TRUE                                              ;(adds Stochastic Oscillator with crossover signals: bool)
stoch_periods       = 5, 3, 0, 3, 0                                     ;(sets K period, D period, slowing period, fast K period, and fast D period: int, int, int, int, int)

use_macd_cross      = TRUE                                              ;(adds Moving Average Convergence Divergence with crossover signals: bool)
macd_cross_periods  = 12, 26, 9                                         ;(sets the fast EMA, slow EMA, and signal line periods for MACD: int, int, int)

use_obv_ma_cross    = TRUE                                              ;(adds On-Balance Volume with moving average crossover signals: bool)
obv_ma_period       = 20                                                ;(sets the period for the moving average for the OBV crossover: int)

use_pct_change      = TRUE                                              ;(adds Percentage Price Change indicator: bool)
pct_change_period   = 24                                                ;(sets the period for percentage price change calculation: int)

use_psar_cl_cross   = TRUE                                              ;(adds Parabolic SAR with close price crossover signals: bool)

use_ultosc          = TRUE                                              ;(adds Ultimate Oscillator indicator: bool)
ultosc_1_periods    = 7, 14, 28                                         ;(sets three periods for Ultimate Oscillator calculation: int, int, int)
ultosc_2_periods    = 14, 28, 56                                        ;(sets three different periods for Ultimate Oscillator calculation: int, int, int)

[INDICATORS_OVERWRITABLE]
use_overwrite       = TRUE                                              ;(uses OVERWRITE_VALUE to overwrite all the indicator period values below: boolean)
overwrite_values    = 7, 14, 28, 100                                    ;(the values used to overwrite all the indicator period values below when OVERWRITE_PERIODS is set to TRUE: int, ...)

use_adx             = TRUE                                              ;(adds Average Directional Index (ADX) indicator: bool)
adx_periods         = FALSE                                             ;(sets the period for ADX calculation: bool OR int)

use_rsi             = TRUE                                              ;(adds Relative Strength Index (RSI) indicator: bool)
rsi_periods         = FALSE                                             ;(sets the period for RSI calculation: bool OR int)

use_cci             = TRUE                                              ;(adds Commodity Channel Index (CCI) indicator: bool)
cci_periods         = FALSE                                             ;(sets the period for CCI calculation: bool OR int)

use_mfi             = TRUE                                              ;(adds Money Flow Index (MFI) indicator: bool)
mfi_periods         = FALSE                                             ;(sets the period for MFI calculation: bool OR int)

use_aroonosc        = TRUE                                              ;(adds Aroon Oscillator indicator: bool)
aroonosc_periods    = FALSE                                             ;(sets the period for Aroon Oscillator calculation: bool OR int)

use_cmo             = TRUE                                              ;(adds Chande Momentum Oscillator (CMO) indicator: bool)
cmo_periods         = FALSE                                             ;(sets the period for CMO calculation: bool OR int)

use_hi_lo_pct       = TRUE                                              ;(adds High-Low Percentage indicator: bool)
hi_lo_pct_periods   = FALSE                                             ;(sets the period for High-Low Percentage calculation: bool OR int)